// Minimal Rhubarb Lip Sync Library Simulation
(function(window) {
    class RhubarbInstance {
        constructor() {
            this.audioFile = null;
            this.text = '';
            this.isRunning = false;
            this.onPhonemeEvent = null;
            this.animationFrame = null;
        }

        setAudioFile(audioElement) {
            this.audioFile = audioElement;
        }

        setText(text) {
            this.text = text;
        }

        start() {
            this.isRunning = true;
            this.simulateLipSync();
        }

        stop() {
            this.isRunning = false;
            if (this.animationFrame) {
                cancelAnimationFrame(this.animationFrame);
            }
        }

        simulateLipSync() {
            if (!this.isRunning) return;

            // Simulate phoneme progression
            const phonemeSequence = ['X', 'B', 'C', 'D', 'E', 'A', 'X'];
            const time = performance.now() * 0.01;
            const phoneIndex = Math.floor(time % phonemeSequence.length);
            const currentPhoneme = phonemeSequence[phoneIndex];

            // Trigger phoneme event if set
            if (this.onPhonemeEvent && typeof this.onPhonemeEvent === 'function') {
                this.onPhonemeEvent(currentPhoneme);
            }

            // Continue animation
            this.animationFrame = requestAnimationFrame(() => this.simulateLipSync());
        }
    }

    // Expose to global scope
    window.Rhubarb = {
        Instance: RhubarbInstance
    };
})(window);